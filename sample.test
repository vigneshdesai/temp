import yaml
import re

apache_config = """
<VirtualHost *:80>
    ServerName example.com
    ProxyPass "/api/" "http://backend.local/"
    ProxyPassReverse "/api/" "http://backend.local/"

    RewriteCond %{HTTPS} !=on
    RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]

    RewriteRule "^/old-path$" "/new-path" [R=302,L,NC]
    RewriteRule "^/proxy-me$" "http://backend.local/proxy" [P,L]
    RewriteRule "^/internal$" "/hidden" [L]
    RewriteRule "^/append-query$" "/target?new=true" [QSA,L]

    <Location "/secure">
        Require valid-user
        AuthType Basic
    </Location>

    <LocationMatch "^/admin/.*">
        Require valid-user
    </LocationMatch>

    Header set X-Frame-Options "DENY"
    Alias /static/ "/var/www/html/"
</VirtualHost>
"""

def parse_apache_config(config):
    services = []
    plugins = []
    routes = []
    
    clean_config = "\n".join(line for line in config.split("\n") if not line.strip().startswith("#"))

    server_name_match = re.search(r'ServerName\s+(\S+)', clean_config)
    server_name = server_name_match.group(1) if server_name_match else "default_service"

    proxy_matches = re.findall(r'ProxyPass\s+"([^"]+)"\s+"([^"]+)"', clean_config)
    for path, backend in proxy_matches:
        services.append({
            "name": f"{server_name}_service",
            "url": backend,
            "routes": [
                {
                    "name": f"{server_name}_route",
                    "paths": [path.rstrip('/')],
                    "strip_path": False
                }
            ]
        })

    https_redirect = re.search(r'RewriteCond\s+\%\{HTTPS\}\s+!=on\s+RewriteRule\s+\^\(\.\*\)\$\s+(https:\/\/[^\s]+)\s+\[R=301,L\]', clean_config)
    if https_redirect:
        plugins.append({
            "name": "request-transformer",
            "config": {
                "add": {
                    "headers": {"Location": https_redirect.group(1)}
                },
                "http_method": "301"
            }
        })

    rewrite_matches = re.findall(r'RewriteRule\s+"([^"]+)"\s+"([^"]+)"\s*\[?([^\]]*)\]?', clean_config)
    for old_path, new_path, flags in rewrite_matches:
        flag_set = flags.split(",") if flags else []
        rule_type = "rewrite"
        query_string_append = "QSA" in flag_set
        case_insensitive = "NC" in flag_set
        last_rule = "L" in flag_set

        if "R=301" in flag_set:
            rule_type = "redirect"
            http_status = "301"
        elif "R=302" in flag_set:
            rule_type = "redirect"
            http_status = "302"
        elif "P" in flag_set:
            rule_type = "proxy"

        route = {
            "name": f"{server_name}_{old_path.replace('/', '_')}_route",
            "paths": [old_path.rstrip('/')],
            "strip_path": False
        }

        if case_insensitive:
            route["headers"] = {"X-Case-Insensitive": "true"}
        if last_rule:
            route["headers"] = {"X-Last-Rule": "true"}

        if rule_type == "redirect":
            plugins.append({
                "name": "request-transformer",
                "config": {
                    "add": {
                        "headers": {"Location": new_path}
                    },
                    "http_method": http_status
                }
            })
        elif rule_type == "proxy":
            services.append({
                "name": f"{server_name}_proxy_service",
                "url": new_path,
                "routes": [route]
            })
        else:
            if query_string_append:
                new_path += "?new=true"
            routes.append(route)

    location_matches = re.findall(r'<Location\s+"([^"]+)">\s+Require valid-user\s+AuthType Basic\s+</Location>', clean_config)
    for loc in location_matches:
        services.append({
            "name": f"{server_name}_secure_service",
            "url": f"http://backend.local{loc}",
            "routes": [
                {
                    "name": f"{server_name}_secure_route",
                    "paths": [loc.rstrip('/')],
                    "strip_path": False,
                    "plugins": [
                        {"name": "acl", "config": {"allow": ["authenticated"]}},
                        {"name": "basic-auth"}
                    ]
                }
            ]
        })

    location_match = re.findall(r'<LocationMatch\s+"([^"]+)">\s+Require valid-user\s+</LocationMatch>', clean_config)
    for loc in location_match:
        routes.append({
            "name": f"{server_name}_admin_route",
            "paths": [],
            "strip_path": False,
            "regex_priority": 10,
            "headers": {"Host": [server_name]},
            "methods": ["GET", "POST"],
            "plugins": [
                {"name": "acl", "config": {"allow": ["authenticated"]}},
                {"name": "basic-auth"}
            ]
        })

    header_matches = re.findall(r'Header\s+set\s+(\S+)\s+"([^"]+)"', clean_config)
    for header, value in header_matches:
        plugins.append({
            "name": "response-transformer",
            "config": {
                "add": {
                    "headers": {header: value}
                }
            }
        })

    alias_matches = re.findall(r'Alias\s+(\S+)\s+"([^"]+)"', clean_config)
    for path, directory in alias_matches:
        services.append({
            "name": f"{server_name}_static_service",
            "url": f"file://{directory}",
            "routes": [
                {
                    "name": f"{server_name}_static_route",
                    "paths": [path.rstrip('/')],
                    "strip_path": False
                }
            ]
        })

    return {"_format_version": "3.0", "services": services, "routes": routes, "plugins": plugins}

kong_config = parse_apache_config(apache_config)

with open("kong.yml", "w") as file:
    yaml.dump(kong_config, file, default_flow_style=False)

print("âœ… Kong declarative config generated: kong.yml")



========================
import yaml
import re

# Sample Apache VirtualHost Configuration
apache_config = """
<VirtualHost *:80>
    ServerName example.com
    ProxyPass "/api/" "http://backend.local/"
    ProxyPassReverse "/api/" "http://backend.local/"

    RewriteCond %{HTTP_HOST} ^old.example.com$ [NC]
    RewriteRule "^/old-path$" "/new-path" [R=301,L,NC]

    <Location "/secure">
        Require valid-user
        AuthType Basic
    </Location>

    <LocationMatch "^/admin/.*">
        Require valid-user
    </LocationMatch>

    Header set X-Frame-Options "DENY"
    Alias /static/ "/var/www/html/"
</VirtualHost>
"""

def parse_apache_config(config):
    services = []
    plugins = []
    routes = []

    # Extract ServerName
    server_name_match = re.search(r'ServerName\s+(\S+)', config)
    server_name = server_name_match.group(1) if server_name_match else "default_service"

    # Extract ProxyPass rules
    proxy_matches = re.findall(r'ProxyPass\s+"([^"]+)"\s+"([^"]+)"', config)
    for path, backend in proxy_matches:
        services.append({
            "name": f"{server_name}_service",
            "url": backend,
            "routes": [
                {
                    "name": f"{server_name}_route",
                    "paths": [path.rstrip('/')],
                    "strip_path": False
                }
            ]
        })

    # Extract RewriteCond and RewriteRule (301 Redirects)
    rewrite_cond_match = re.search(r'RewriteCond\s+\%\{HTTP_HOST\}\s+\^([^\$]+)\$\s+\[NC\]', config, re.IGNORECASE)
    rewrite_host = rewrite_cond_match.group(1) if rewrite_cond_match else None

    rewrite_matches = re.findall(r'RewriteRule\s+"([^"]+)"\s+"([^"]+)"\s+\[R=(\d+),?(NC)?,?(L)?\]', config, re.IGNORECASE)
    for old_path, new_path, status, nc_flag, l_flag in rewrite_matches:
        redirect_rule = {
            "name": "request-transformer",
            "config": {
                "add": {
                    "headers": {"Location": new_path}
                },
                "http_method": status
            }
        }
        if rewrite_host:
            redirect_rule["config"]["add"]["headers"]["Host"] = rewrite_host
        if nc_flag:
            redirect_rule["config"]["add"]["headers"]["X-Case-Insensitive"] = "true"  # Custom handling for NC
        if l_flag:
            redirect_rule["config"]["add"]["headers"]["X-Last-Rule"] = "true"  # Custom handling for L
        plugins.append(redirect_rule)

    # Extract <Location> Authentication
    location_matches = re.findall(r'<Location\s+"([^"]+)">\s+Require valid-user\s+AuthType Basic\s+</Location>', config)
    for loc in location_matches:
        services.append({
            "name": f"{server_name}_secure_service",
            "url": f"http://backend.local{loc}",
            "routes": [
                {
                    "name": f"{server_name}_secure_route",
                    "paths": [loc.rstrip('/')],
                    "strip_path": False,
                    "plugins": [
                        {"name": "acl", "config": {"allow": ["authenticated"]}},
                        {"name": "basic-auth"}
                    ]
                }
            ]
        })

    # Extract <LocationMatch> Authentication (Regex Routing)
    location_match = re.findall(r'<LocationMatch\s+"([^"]+)">\s+Require valid-user\s+</LocationMatch>', config)
    for loc in location_match:
        routes.append({
            "name": f"{server_name}_admin_route",
            "paths": [],
            "strip_path": False,
            "regex_priority": 10,
            "headers": {"Host": [server_name]},
            "methods": ["GET", "POST"],
            "plugins": [
                {"name": "acl", "config": {"allow": ["authenticated"]}},
                {"name": "basic-auth"}
            ]
        })

    # Extract Headers (Response Modifications)
    header_matches = re.findall(r'Header\s+set\s+(\S+)\s+"([^"]+)"', config)
    for header, value in header_matches:
        plugins.append({
            "name": "response-transformer",
            "config": {
                "add": {
                    "headers": {header: value}
                }
            }
        })

    # Extract Alias (Static File Serving)
    alias_matches = re.findall(r'Alias\s+(\S+)\s+"([^"]+)"', config)
    for path, directory in alias_matches:
        services.append({
            "name": f"{server_name}_static_service",
            "url": f"file://{directory}",
            "routes": [
                {
                    "name": f"{server_name}_static_route",
                    "paths": [path.rstrip('/')],
                    "strip_path": False
                }
            ]
        })

    return {"_format_version": "3.0", "services": services, "routes": routes, "plugins": plugins}

# Convert Apache to Kong YAML
kong_config = parse_apache_config(apache_config)

# Write to kong.yml
with open("kong.yml", "w") as file:
    yaml.dump(kong_config, file, default_flow_style=False)

print("âœ… Kong declarative config generated: kong.yml")













Apache ErrorDocument Condition	Kong Equivalent
Custom 404 Error Page	request-termination Plugin
Custom 500 Error Page	response-transformer Plugin
Custom 403 Forbidden Page	request-termination Plugin



Apache SetEnvIf Condition	Kong Equivalent
Set environment variable based on User-Agent	request-transformer Plugin
Allow/Block access based on IP (Remote_Addr)	ip-restriction Plugin
Match requests based on method (Request_Method)	Route filtering (methods[])
Set custom headers (Header set)	request-transformer Plugin


<VirtualHost *:80>
    ServerName www.yourdomain.com

    <Location /your-endpoint>
        Require all denied
        ErrorDocument 401 "Unauthorized access"
        AuthType Basic
        AuthName "Restricted Area"
        AuthUserFile /dev/null
    </Location>

    # Other configurations for the virtual host
</VirtualHost>



#!/bin/bash

# Define the input file
input_file="input.txt"

# Function to calculate MD5 hash and replace the string
replace_md5() {
  local input="$1"
  local prefix="MD5_"
  
  # Find all occurrences of MD5_<text> in the input
  while [[ $input =~ (MD5_[a-zA-Z0-9_]+) ]]; do
    full_match="${BASH_REMATCH[1]}"
    text_to_hash="${full_match#$prefix}"
    
    # Calculate MD5 hash
    md5_value=$(echo -n "$text_to_hash" | md5sum | awk '{print $1}')
    
    # Replace the MD5_<text> with the MD5 value in the input
    input="${input//$full_match/$md5_value}"
  done
  
  echo "$input"
}

# Check if the input file exists
if [ ! -f "$input_file" ]; then
  echo "Input file '$input_file' not found!"
  exit 1
fi

# Read the input file line by line
while IFS= read -r line; do
  # Replace MD5_<text> with its MD5 hash in the current line
  updated_line=$(replace_md5 "$line")
  echo "$updated_line"
done < "$input_file"







char?replace("\\", "\\\\").?replace("\"", "\\\"")?eval?hex
-- create_file_plugin_schema.lua

return {
  no_consumer = true,
  fields = {
    path_param_name = { type = "string", default = "file_action" }
  },
  self_check = function(schema, plugin_t, dao, is_update)
    -- Add any additional validation logic here if needed
    return true
  end
}


<#assign path = "/your/directory/path/abc123def456ghi789jkl012mno345">
<#assign delimiter = "/">

<#-- Split the path by the delimiter -->
<#assign parts = path?split(delimiter)>

<#-- Get the last part of the split path -->
<#assign last_part = parts[parts?size - 1]>

<#-- Check if the last part matches the 32-alphanumeric pattern -->
<#if last_part?matches(".*?([a-zA-Z0-9]{32})")>

    <#-- Extract the alphanumeric string using a regular expression -->
    <#assign alphanumeric_string = last_part?matches(".*?([a-zA-Z0-9]{32})")[1]>
    
    Alphanumeric String: ${alphanumeric_string}
    
<#else>
    <#-- Handle the case when the input string doesn't match the pattern -->
    Default Value or Handling for Invalid Input
</#if>



==========
<#-- Custom function to compute SHA-1 hash -->
<#function sha1(inputString)>
    <#assign sha1 = ""?bytes>
    <#attempt>
        <#assign sha1 = inputString?bytes("UTF-8")?sha1>
    <#recover>
        <#-- Handle exception if inputString is not a valid UTF-8 string -->
    </#attempt>
    <#return sha1?hex>
</#function>

<#assign inputString = "example/path/to/resource/32alphanumericstring12345678">
<#assign parts = inputString?split("/")>
<#assign lastPart = parts?last>

<#-- Check if the last part matches the alphanumeric pattern -->
<#if lastPart?matches("^[A-Za-z0-9]{32}$")>
    <#-- Last part is a 32-bit alphanumeric string -->
    <#assign alphanumericString = lastPart>
    The last 32-bit alphanumeric string after "/" is: ${alphanumericString}
    <#-- Compute SHA-1 hash of the alphanumeric string -->
    <#assign sha1Hash = sha1(alphanumericString)>
    SHA-1 hash of the alphanumeric string: ${sha1Hash}
<#else>
    The input string does not contain a 32-bit alphanumeric string after "/"
</#if>

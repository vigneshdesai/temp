
Apache ErrorDocument Condition	Kong Equivalent
Custom 404 Error Page	request-termination Plugin
Custom 500 Error Page	response-transformer Plugin
Custom 403 Forbidden Page	request-termination Plugin



Apache SetEnvIf Condition	Kong Equivalent
Set environment variable based on User-Agent	request-transformer Plugin
Allow/Block access based on IP (Remote_Addr)	ip-restriction Plugin
Match requests based on method (Request_Method)	Route filtering (methods[])
Set custom headers (Header set)	request-transformer Plugin


<VirtualHost *:80>
    ServerName www.yourdomain.com

    <Location /your-endpoint>
        Require all denied
        ErrorDocument 401 "Unauthorized access"
        AuthType Basic
        AuthName "Restricted Area"
        AuthUserFile /dev/null
    </Location>

    # Other configurations for the virtual host
</VirtualHost>



#!/bin/bash

# Define the input file
input_file="input.txt"

# Function to calculate MD5 hash and replace the string
replace_md5() {
  local input="$1"
  local prefix="MD5_"
  
  # Find all occurrences of MD5_<text> in the input
  while [[ $input =~ (MD5_[a-zA-Z0-9_]+) ]]; do
    full_match="${BASH_REMATCH[1]}"
    text_to_hash="${full_match#$prefix}"
    
    # Calculate MD5 hash
    md5_value=$(echo -n "$text_to_hash" | md5sum | awk '{print $1}')
    
    # Replace the MD5_<text> with the MD5 value in the input
    input="${input//$full_match/$md5_value}"
  done
  
  echo "$input"
}

# Check if the input file exists
if [ ! -f "$input_file" ]; then
  echo "Input file '$input_file' not found!"
  exit 1
fi

# Read the input file line by line
while IFS= read -r line; do
  # Replace MD5_<text> with its MD5 hash in the current line
  updated_line=$(replace_md5 "$line")
  echo "$updated_line"
done < "$input_file"







char?replace("\\", "\\\\").?replace("\"", "\\\"")?eval?hex
-- create_file_plugin_schema.lua

return {
  no_consumer = true,
  fields = {
    path_param_name = { type = "string", default = "file_action" }
  },
  self_check = function(schema, plugin_t, dao, is_update)
    -- Add any additional validation logic here if needed
    return true
  end
}


<#assign path = "/your/directory/path/abc123def456ghi789jkl012mno345">
<#assign delimiter = "/">

<#-- Split the path by the delimiter -->
<#assign parts = path?split(delimiter)>

<#-- Get the last part of the split path -->
<#assign last_part = parts[parts?size - 1]>

<#-- Check if the last part matches the 32-alphanumeric pattern -->
<#if last_part?matches(".*?([a-zA-Z0-9]{32})")>

    <#-- Extract the alphanumeric string using a regular expression -->
    <#assign alphanumeric_string = last_part?matches(".*?([a-zA-Z0-9]{32})")[1]>
    
    Alphanumeric String: ${alphanumeric_string}
    
<#else>
    <#-- Handle the case when the input string doesn't match the pattern -->
    Default Value or Handling for Invalid Input
</#if>



==========
<#-- Custom function to compute SHA-1 hash -->
<#function sha1(inputString)>
    <#assign sha1 = ""?bytes>
    <#attempt>
        <#assign sha1 = inputString?bytes("UTF-8")?sha1>
    <#recover>
        <#-- Handle exception if inputString is not a valid UTF-8 string -->
    </#attempt>
    <#return sha1?hex>
</#function>

<#assign inputString = "example/path/to/resource/32alphanumericstring12345678">
<#assign parts = inputString?split("/")>
<#assign lastPart = parts?last>

<#-- Check if the last part matches the alphanumeric pattern -->
<#if lastPart?matches("^[A-Za-z0-9]{32}$")>
    <#-- Last part is a 32-bit alphanumeric string -->
    <#assign alphanumericString = lastPart>
    The last 32-bit alphanumeric string after "/" is: ${alphanumericString}
    <#-- Compute SHA-1 hash of the alphanumeric string -->
    <#assign sha1Hash = sha1(alphanumericString)>
    SHA-1 hash of the alphanumeric string: ${sha1Hash}
<#else>
    The input string does not contain a 32-bit alphanumeric string after "/"
</#if>
